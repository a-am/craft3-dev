user nginx;

worker_processes 4;

# update the logging to display in docker logs
error_log /dev/stderr;

pid /var/run/nginx.pid;

events {
	worker_connections 1024;
}

http {
	include /etc/nginx/mime.types;
	
	default_type application/octet-stream;
	
	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
                    
    # update the access log to sdout
	access_log /dev/stdout main;
	
	sendfile on;
	
	keepalive_timeout 1200s;

	# gzip on;
    # gzip_comp_level    5;
	# gzip_min_length    256;
    # gzip_proxied       any;
    # gzip_vary          on;
	# gzip_types
    #     application/atom+xml
    #     application/javascript
    #     application/json
    #     application/ld+json
    #     application/manifest+json
    #     application/rss+xml
    #     application/vnd.geo+json
    #     application/vnd.ms-fontobject
    #     application/x-font-ttf
    #     application/x-web-app-manifest+json
    #     application/xhtml+xml
    #     application/xml
    #     font/opentype
    #     image/bmp
    #     image/svg+xml
    #     image/x-icon
    #     text/cache-manifest
    #     text/css
    #     text/plain
    #     text/vcard
    #     text/vnd.rim.location.xloc
    #     text/vtt
    #     text/x-component
    #     text/x-cross-domain-policy;

    types {
        text/plain  pub;
    }
    
    server_tokens off;
    
    # redirect http to https
    # server {
    #     listen 80;
    #     listen [::]:80;
    #     server_name localhost;
    #     return 301 http://localhost$request_uri;
    # }

    # Cannonical domain rewrite to remove www., etc. An SSL certificate is required to do the redirect
    # server {
    #     # Listen for both IPv4 & IPv6 requests on port 443 with http2 enabled
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name localhost;
    #     ssl_certificate /etc/letsencrypt/live/localhost/fullchain.pem;
    #     ssl_certificate_key /etc/letsencrypt/live/localhost/privkey.pem;
    #     return 301 https://localhost$request_uri;
    # }

    # Primary virtual host server block
    server {
        listen 80;
        listen [::]:80;
        server_name localhost;

        # General virtual host settings
        root /app/web;
        index index.html index.htm index.php;
        charset utf-8;

        # Misc settings
        sendfile off;
        client_max_body_size 0;

        server_tokens off;

        error_page 404 /index.php;

        # redirect server error pages to the static page /50x.html
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }

        # reduce the data that needs to be sent over network
        # gzip on;
        # gzip_min_length 10240;
        # gzip_proxied expired no-cache no-store private auth;
        # gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
        # gzip_disable "MSIE [1-6]\.";

        location / {
            try_files $uri/index.html $uri $uri/ /index.php?$query_string;
        }

        location ^~ /admin {
            try_files $uri $uri/ /index.php?$query_string;
        }
        location ^~ /cpresources {
            try_files $uri $uri/ /index.php?$query_string;
        }

        # pass the PHP scripts to FastCGI server listening on socket
        location ~ [^/]\.php(/|$) {
            try_files $uri $uri/ /index.php?$query_string;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass php-fpm:9000;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
        }

        # location ~ ^(.*)$ {
        #     try_files $uri $uri/ /index.php?p=$uri&$args;
        # }

        # location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc|ttf|ttc|otf|eot|woff)$ {
        #     try_files $uri /index.php?$query_string;
        #     expires max;
        #     add_header Pragma public;
        #     add_header Cache-Control "public, must-revalidate, proxy-revalidate";
        # }

        # location ~* \.(?:css|js)$ {
        #     try_files $uri /index.php?$query_string;
        #     expires 1y;
        #     add_header Cache-Control "public";
        # }

        location = /robots.txt  { access_log off; log_not_found off; }
        location = /favicon.ico { access_log off; log_not_found off; }
        location ~ /\. { access_log off; log_not_found off; deny all; }

        location ~ /\.ht {
            deny all;
        }

        # location ~* (?:\.(?:bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)|~)$ {
        #     deny all;
        #     access_log off;
        #     log_not_found off;
        # }

    }
}